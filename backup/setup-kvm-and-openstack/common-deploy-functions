#!/bin/bash

prep_vm () {
  VM_TYPE=$1

  VM_NAME=${LAB_NAME}-${VM_TYPE}
  VM_IMAGE_NAME=${VM_NAME}.qcow2
  VM_IMAGE_PATH=${IMAGE_LOCAL_DIR}/${VM_IMAGE_NAME}
  VM_IMAGE_STAGING_PATH=${IMAGE_STAGING_DIR}/${VM_IMAGE_NAME}
  VM_IMAGE_URL=${VM_IMAGE_URL_BASE}/${VM_NAME}/${VM_IMAGE_NAME}

  echo $VM_TYPE
  echo ${VM_IMAGE_NAME}
  echo ${VM_IMAGE_URL}
  echo ${VM_NAME}

  # Check if VM is already defined
  if virsh list | grep -q ${VM_NAME}
  then
    echo "ERROR: ${VM_NAME} already exists. To remove it run the 'remove-${VM_TYPE}.sh' script."
    exit 1
  fi

  # Check for SSH keys
  if [ ! -f ${SSH_KEY_FILENAME} ]
  then
    echo "ERROR: ${SSH_KEY_FILENAME} not present, run 'deploy-kvm-host-config.sh' first"
    exit 1
  fi

  # If no ssh-agent is running, start one and load the private key
  if [ -z "${SSH_AUTH_SOCK}" ]
  then
   eval "$(ssh-agent -s)"
    ssh-add ${SSH_KEY_FILENAME}
  fi

  if [ $USE_FILESHARE == true ]
  then
    # Copy tower private key
    cmd wget -O ${IMAGE_STAGING_DIR}/${TOWER_PRIVATE_KEY} ${TOWER_PRIVATE_KEY_URL}

    # Grab image from source URL and keep a local copy
    echo "INFO: Downloading image to ${VM_IMAGE_STAGING_PATH}."
    cmd wget --continue -O ${VM_IMAGE_STAGING_PATH} ${VM_IMAGE_URL}

    echo "INFO: Copying image to ${VM_IMAGE_PATH} to preserve original for future runs."
    # Copy to libvirt/images but leave in local source dir to speed up future runs
    cmd rsync -avP ${VM_IMAGE_STAGING_PATH} ${VM_IMAGE_PATH}
  else
    if [[ ! -f ${VM_IMAGE_PATH} || ! -f ${IMAGE_STAGING_DIR}/${TOWER_PRIVATE_KEY} ]]
    then
      echo "ERROR: files need to be pre-staged if USE_FILESHARE is false"
      exit 1
    fi
  fi
}

customize_vm() {
  VM_TYPE=$1

  VM_NAME=${LAB_NAME}-${VM_TYPE}
  VM_IMAGE_NAME=${VM_NAME}.qcow2
  VM_IMAGE_PATH=${IMAGE_LOCAL_DIR}/${VM_IMAGE_NAME}
  VM_IMAGE_STAGING_PATH=${IMAGE_STAGING_DIR}/${VM_IMAGE_NAME}
  VM_IMAGE_URL=${VM_IMAGE_URL_BASE}/${VM_NAME}/${VM_IMAGE_NAME}

  echo $VM_TYPE
  echo ${VM_IMAGE_NAME}
  echo ${VM_IMAGE_URL}
  echo ${VM_NAME}

  cmd virt-customize -a ${VM_IMAGE_PATH} \
    --hostname ${VM_TYPE}.${ADMIN_DOMAIN} \
    --root-password password:${PASSWORD} \
    --ssh-inject root:file:${SSH_KEY_FILENAME}.pub \
    --copy-in ${IMAGE_STAGING_DIR}/${TOWER_PRIVATE_KEY}:/root/ \
    --chmod 0600:/root/${TOWER_PRIVATE_KEY} \
    --mkdir /etc/tuned/${LAB_NAME} \
    --write /etc/tuned/${LAB_NAME}/tuned.conf:'[main]
include=virtual-guest
[disk]
elevator=noop' \
    --run-command "tuned-adm profile ${LAB_NAME}" \
    --write /etc/sysconfig/network-scripts/ifcfg-eth0:'DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
PEERDNS=yes
PERSISTENT_DHCLIENT=1
' \
    --selinux-relabel

  if [ "${VM_TYPE}" != "rhosp" ]
  then
    cmd virt-customize -a ${VM_IMAGE_PATH} \
      --write /etc/sysconfig/network-scripts/ifcfg-eth1:'DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
PEERDNS=no
IPADDR='"${VM_IP[$VM_TYPE]}"'
NETMASK=255.255.255.0
GATEWAY=172.20.17.1
DNS1=172.20.17.1
'
  fi
}

deploy_vm() {
  VM_TYPE=$1

  VM_NAME=${LAB_NAME}-${VM_TYPE}
  VM_IMAGE_NAME=${VM_NAME}.qcow2
  VM_IMAGE_PATH=${IMAGE_LOCAL_DIR}/${VM_IMAGE_NAME}
  VM_IMAGE_URL=${VM_IMAGE_URL_BASE}/${VM_NAME}/${VM_IMAGE_NAME}

  # Bring up VM
  cmd virt-install --ram ${VM_RAM[$VM_TYPE]} --vcpus ${VM_VCPUS[$VM_TYPE]} \
    --os-variant rhel7 --cpuset=auto --graphics none --cpu host-passthrough \
    --cpuset=auto --controller type=scsi,model=virtio-scsi \
    --disk path=${VM_IMAGE_PATH},bus=scsi,discard=unmap,cache=writeback \
    --import --noautoconsole \
    --network network:${LAB_NAME}-admin \
    --network network:${LAB_NAME}-rhosp \
    --name ${VM_NAME}

  echo -n "Waiting for ${VM_NAME} VM to come online at ${VM_IP[$VM_TYPE]}"
  counter=0
  while :
  do
    counter=$(( $counter + 1 ))
    if ping -c 1 ${VM_IP[$VM_TYPE]} 2>&1 > /dev/null
    then
      break
    fi
    if [ $counter -gt $TIMEOUT ]
    then
      echo ""
      echo "ERROR: something went wrong - check console"
      exit 1
    elif [ $counter -eq $(( $TIMEOUT / 2 )) ]
    then
      echo ""
      echo -n "WARN: this is taking longer than expected"
    fi
    echo -n "."
  done
  echo ""

  echo -n "Waiting for ${VM_NAME} to start sshd on ${VM_IP[$VM_TYPE]}"
  counter=0
  while :
  do
    counter=$(( $counter + 1 ))
    sleep 1
    if nmap -p22 ${VM_IP[$VM_TYPE]} | grep -q "22/tcp.*open"
    then
      break
    fi
    if [ $counter -gt $TIMEOUT ]
    then
      echo ""
      echo "ERROR: something went wrong - check console"
      exit 1
    elif [ $counter -eq $(( $TIMEOUT / 2 )) ]
    then
      echo ""
      echo -n "WARN: this is taking longer than expected"
    fi
    echo -n "."
  done
  echo ""

  echo "INFO: ${VM_TYPE} IP: ${VM_IP[$VM_TYPE]}"
}

remove_vm () {
  VM_TYPE=$1

  VM_NAME=${LAB_NAME}-${VM_TYPE}
  VM_IMAGE_NAME=${VM_NAME}.qcow2
  VM_IMAGE_PATH=${IMAGE_LOCAL_DIR}/${VM_IMAGE_NAME}
  VM_IMAGE_STAGING_PATH=${IMAGE_STAGING_DIR}/${VM_IMAGE_NAME}

  if virsh list | grep -q ${VM_NAME}
  then
    virsh destroy ${VM_NAME}
  fi
  if virsh list --all | grep -q ${VM_NAME}
  then
    virsh undefine ${VM_NAME}
  fi
  echo "INFO: Removing ${VM_IMAGE_PATH}"
  rm -fv ${VM_IMAGE_PATH}
  echo ""
  if [ -f ${VM_IMAGE_STAGING_PATH} ]
  then
    echo "TIP: Leave local image in /tmp/ to speed up deploy scripts, remove local image in /tmp/ to retrieve updated images or if using build scripts."
    rm -iv ${VM_IMAGE_STAGING_PATH}
  fi
}
