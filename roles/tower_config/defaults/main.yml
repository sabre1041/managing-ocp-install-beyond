---
# Tower general config
tower_host: localhost
tower_username: admin
tower_password: "{{ tower_password }}"
tower_projects_root: "/var/lib/awx/projects"
tower_user_add: true

# Tower CLI config
tower_cli_credentials_config: true
tower_cli_credentials_keep: true
tower_cli_verbosity: "--verbose"
# For the following variable, any valid 'tower-cli workflow_job launch --help' e.g. --wait --monitor --timeout INTEGER or nothing at all to launch the workflow_job as async, 
tower_cli_workflow_job_launch_options: "--monitor"

# Tower prerequisites
tower_prereqs_config: false

# Tower yum packages
tower_yum_packages:
  - python2-ansible-tower-cli
  - git
  - pyOpenSSL
  - python-netaddr
  - python-six
  - python-click
  - python-httplib2
  - python2-pip

# Tower pip packages
tower_pip_packages:
  - pexpect

# Tower package install for 'self' provision
tower_package_config: true

# Tower Organization
tower_org: "Default"
tower_org_config: false

# Tower machine credential
tower_credential_machine: "SSH"
tower_credential_machine_config: false
tower_credential_machine_description: "Private SSH Key"
tower_credential_machine_type: "Machine"
# The following should be a private SSH key in the same local directory that the playbook is run. A future refactor should allow absolute filenames instead. Specify this value in your secrets file but ONLY if 'tower_credential_machine_config: true'. Since the default is 'false' this should normally not matter.
tower_credential_machine_ssh_key_data_file: "set_this_to_a_local_private_key_to_add_as_machine_credential_only_if_overwriting_credentials.pem"
tower_credential_machine_username: "ec2-user"

# Tower cloud credential
tower_credential_cloud: "AWS"
tower_credential_cloud_config: false
tower_credential_cloud_description: "AWS Access and Secret"
tower_credential_cloud_type: "Amazon Web Services"
tower_credential_cloud_username: "{{ tower_ec2_access_key }}"
tower_credential_cloud_password: "{{ tower_ec2_secret_key }}"

# Tower inventory
tower_inventory: "OpenShift"
tower_inventory_config: true
tower_inventory_description: "Inventory for all AWS Instances"
tower_inventory_group: "AWS"
tower_inventory_group_config: true
tower_inventory_group_description: "AWS dynamic inventory"
tower_inventory_group_source: "ec2"
tower_inventory_group_source_description: "EC2 Source"
tower_inventory_group_source_filters: "tag:student_id={{ student_id }}"
tower_inventory_group_source_update_on_launch: "yes"
tower_inventory_group_source_overwrite: "no"
tower_inventory_group_source_overwrite_vars: "no"
tower_inventory_group_source_vars:
  regions: "{{ aws_region }}"
  destination_format: "{0}"
  destination_format_tags: "Name"
  instance_states: "running"
  all_instances: False
tower_inventory_sync: true
tower_openshift_install_group: "OSEv3"
tower_openshift_install_group_config: false
tower_openshift_install_group_description: "All OCP nodes"
tower_openshift_masters_group: "masters"
tower_openshift_masters_group_config: false
tower_openshift_masters_description: "OCP masters"
tower_openshift_etcd_group: "etcd"
tower_openshift_etcd_group_config: false
tower_openshift_etcd_description: "OCP etcd"
tower_openshift_nodes_group: "nodes"
tower_openshift_nodes_group_config: false
tower_openshift_nodes_description: "OCP nodes"
tower_openshift_new_nodes_group: "new_nodes"
tower_openshift_new_nodes_group_config: false
tower_openshift_new_nodes_description: "New OCP nodes"
tower_master_tag: "tag_lab_role_master"
tower_master_tag_description: "nodes with the tag 'tag_lab_role_master'"
tower_node_tag: "tag_lab_role_node"
tower_node_tag_description: "nodes with the tag 'tag_lab_role_node'"
tower_new_node_tag: "tag_lab_role_new_node"
tower_new_node_tag_description: "nodes with the tag 'tag_lab_role_new_node'"

# Tower projet for provision and configure playbooks
tower_project_provision_and_configure: "Managing OCP from Install and Beyond"
tower_project_provision_and_configure_config: true
tower_project_provision_and_configure_description: "Git repo with Ansible playbooks for provision (pre-install) and configure (post-install)"
tower_project_provision_and_configure_type: "git"
tower_project_provision_and_configure_url: "https://github.com/sabre1041/managing-ocp-install-beyond.git"
tower_project_provision_and_configure_branch: "summit2018"
tower_project_provision_and_configure_local_branch: ""
tower_project_provision_and_configure_clean: "yes"
tower_project_provision_and_configure_update_on_launch: "no"
tower_project_provision_and_configure_delete_on_update: "no"

# Tower project for install
tower_project_install: "openshift-ansible"
tower_project_install_config: false
tower_project_install_package: "openshift-ansible-playbooks"
tower_project_install_description: "Red Hat OpenShift Container Platform Ansible Playbooks"
tower_project_install_type: "manual"
tower_project_install_url: ""
tower_project_install_branch: ""
tower_project_install_local_path: "share"
tower_project_install_source_path: "/usr/share/ansible/openshift-ansible/"
tower_project_install_clean: "yes"
tower_project_install_update_on_launch: "no"
tower_project_install_delete_on_update: "no"

# Tower job template for self-configure
tower_job_template_self_configure: "0-Self-Configure"
tower_job_template_self_configure_config: true
tower_job_template_self_configure_description: "Tower self-configure"
tower_job_template_self_configure_playbook: "tower_config.yml"
tower_job_template_self_configure_limit: "localhost"
tower_job_template_self_configure_extra_vars_path: "tower_job_template_self_configure_extra_vars.yml.j2"

# Tower job template for deployment-provision
tower_job_template_deploy_provision: "Deploy-1-Provision"
tower_job_template_deploy_provision_config: false
tower_job_template_deploy_provision_description: "Deployment Step 1 - Creates AWS instances to be used as an OCP cluster in later job templates"
tower_job_template_deploy_provision_playbook: "aws_create_hosts.yml"
tower_job_template_deploy_provision_extra_vars_path: "tower_job_template_deploy_provision_extra_vars.yml.j2"

# Tower job template for deployment-prerequisites
tower_job_template_deploy_prerequisites: "Deploy-2-Prerequisites"
tower_job_template_deploy_prerequisites_config: false
tower_job_template_deploy_prerequisites_description: "Deployment Step 2 - Installs Prerequisites for OpenShift Container Platform"
tower_job_template_deploy_prerequisites_playbook: "ansible/openshift-ansible/playbooks/prerequisites.yml"
tower_job_template_deploy_prerequisites_become_enabled: "yes"

# Tower job template for deployment-install
tower_job_template_deploy_install: "Deploy-3-Install"
tower_job_template_deploy_install_config: false
tower_job_template_deploy_install_description: "Deployment Step 3 - Installs OpenShift Container Platform"
tower_job_template_deploy_install_playbook: "ansible/openshift-ansible/playbooks/deploy_cluster_wrapper.yml"
tower_job_template_deploy_install_become_enabled: "yes"

# Job template for deployment-configure
tower_job_template_deploy_configure: "Deploy-4-Post-Install"
tower_job_template_deploy_configure_config: false
tower_job_template_deploy_configure_description: "Deployment Step 3 - Post-install configuration"
tower_job_template_deploy_configure_playbook: "openshift_postinstall.yml"
tower_job_template_deploy_configure_become_enabled: "yes"
tower_job_template_deploy_configure_extra_vars_path: "tower_job_template_postinstall_extra_vars.yml.j2"


# Tower job template for scaleup-provision
tower_job_template_scaleup_provision: "Scaleup-1-Provision"
tower_job_template_scaleup_provision_config: false
tower_job_template_scaleup_provision_description: "Scaleup Step 1 - Creates AWS instance to be added to the existing OCP cluster"
tower_job_template_scaleup_provision_playbook: "aws_add_node.yml"
tower_job_template_scaleup_provision_extra_vars_path: "tower_job_template_scaleup_provision_extra_vars.yml.j2"

# Tower job template for scaleup-install
tower_job_template_scaleup_install: "Scaleup-2-Install"
tower_job_template_scaleup_install_config: false
tower_job_template_scaleup_install_description: "Scaleup Step 2 - Add instance as a node to existing OCP cluster"
tower_job_template_scaleup_install_playbook: "ansible/openshift-ansible/playbooks/openshift-node/scaleup.yml"
tower_job_template_scaleup_install_become_enabled: "yes"

# Job template for scaleup-configure
tower_job_template_scaleup_configure: "Scaleup-3-Post-Install"
tower_job_template_scaleup_configure_config: false
tower_job_template_scaleup_configure_description: "Scaleup Step 3 Post-Install configuration"
tower_job_template_scaleup_configure_playbook: "openshift_scaleup_postinstall.yml"
tower_job_template_scaleup_configure_extra_vars_path: "tower_job_template_scaleup_postinstall_extra_vars.yml.j2"


# Tower job template for terminate-ocp
tower_job_template_terminate_ocp: "Terminate-OCP"
tower_job_template_terminate_ocp_config: false
tower_job_template_terminate_ocp_description: "Terminate all OpenShift masters and nodes"
tower_job_template_terminate_ocp_playbook: "aws_terminate_instances.yml"
tower_job_template_terminate_ocp_extra_vars: "terminate_tower=false tower_password={{ tower_password }} tower_inventory={{ tower_inventory }} aws_region={{ aws_region }}"

# Tower job template for terminate-all
tower_job_template_terminate_all: "Terminate-All"
tower_job_template_terminate_all_config: false
tower_job_template_terminate_all_description: "Terminate all instances including Tower"
tower_job_template_terminate_all_playbook: "aws_terminate_instances.yml"
tower_job_template_terminate_all_extra_vars: "terminate_tower=true tower_password={{ tower_password }} tower_inventory={{ tower_inventory }} aws_region={{ aws_region }}"

# Tower Workflow Assets for self_configure job
# Set to true to launch the job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_job_self_configure_launch: false
# Workflow job timeout in seconds
tower_job_self_configure_launch_async: 300
# Workflow job polling
tower_job_self_configure_launch_poll: 15

# Tower Workflow Assets for Deploy job
tower_workflow_template_deploy: "1-Deploy_OpenShift_on_AWS"
tower_workflow_template_deploy_config: false
tower_workflow_template_deploy_description: "Deploy OpenShift on AWS."
# Place any variables that will be available to all job templates and inventory hosts
tower_workflow_template_deploy_extra_vars: "tower_workflow_template_deploy_extra_vars.yml"
# Wire up job_templates for Deploy in this file
tower_workflow_template_deploy_schema_path: "tower_workflow_template_deploy_schema.yml"
# Set to true to launch the workflow job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_workflow_job_deploy_launch: false
# Workflow job timeout in seconds
tower_workflow_job_deploy_launch_async: 2700
# Workflow job polling
tower_workflow_job_deploy_launch_poll: 60

# Tower Workflow Assets for Scaleup job
tower_workflow_template_scaleup: "2-Scaleup_OpenShift_on_AWS"
tower_workflow_template_scaleup_config: false
tower_workflow_template_scaleup_description: "Scaleup OpenShift on AWS"
# Place any variables that will be available to all job templates and inventory hosts
tower_workflow_template_scaleup_extra_vars: "{{ tower_workflow_template_deploy_extra_vars }}"
# Wire up job_templates for Scaleup in this file
tower_workflow_template_scaleup_schema_path: "tower_workflow_template_scaleup_schema.yml"
# Set to true to launch the workflow job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_workflow_job_scaleup_launch: false
# Workflow job timeout in seconds
tower_workflow_job_scaleup_launch_async: 1200
# Workflow job polling
tower_workflow_job_scaleup_launch_poll: 60

# Tower Workflow Assets for Terminate job
tower_workflow_template_terminate: "3-Terminate_All"
tower_workflow_template_terminate_config: false
tower_workflow_template_terminate_description: "Terminate instances (including self) on AWS"
# Wire up job_templates for Terminate in this file
tower_workflow_template_terminate_schema_path: "tower_workflow_template_terminate_schema.yml"
# Set to true to launch the workflow job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_workflow_job_terminate_launch: false
# Workflow job timeout in seconds
tower_workflow_job_terminate_launch_async: 360
# Workflow job polling
tower_workflow_job_terminate_launch_poll: 0

tower_openshift_config_dir: "/var/lib/aws/openshift"
tower_openshift_prometheus_config_dir: "{{ tower_openshift_config_dir }}/prometheus"
tower_openshift_letsencrypt_config_dir: "{{ tower_openshift_config_dir }}/letsencrypt"
letsencrypt_base_directory: "/tmp/letsencrypt"
letsencrypt_fullchain_filename: letsencrypt-fullchain.crt
letsencrypt_key_filename: letsencrypt.key
letsencrypt_ca_filename: letsencrypt.ca
letsencrypt_crt_filename: letsencrypt.crt
...
